$date
	Thu Mar 21 08:43:22 2024
$end
$version
	QuestaSim Version 2021.3
$end
$timescale
	1ns
$end

$scope module stimulus $end
$var wire 1 ! zero $end
$var reg 1 " clock $end
$var reg 1 # reset $end

$scope module test_processor $end
$var wire 4 $ alu_control [3:0] $end
$var wire 1 % clock $end
$var wire 32 & instruction_code [31:0] $end
$var wire 1 ' regwrite $end
$var wire 1 ( reset $end
$var wire 1 ! zero $end

$scope module IFU_module $end
$var wire 32 & Instruction_Code [31:0] $end
$var wire 1 % clock $end
$var wire 1 ( reset $end
$var reg 32 ) PC [31:0] $end
$var reg 32 * count [31:0] $end

$scope module instr_mem $end
$var wire 32 & Instruction_Code [31:0] $end
$var wire 32 + PC [31:0] $end
$var wire 1 % clock $end
$var wire 1 ( reset $end
$upscope $end
$upscope $end

$scope module control_module $end
$var wire 3 , funct3 [2:0] $end
$var wire 7 - funct7 [6:0] $end
$var wire 7 . opcode [6:0] $end
$var reg 4 / alu_control [3:0] $end
$var reg 1 0 regwrite_control $end
$upscope $end

$scope module datapath_module $end
$var wire 4 $ alu_control [3:0] $end
$var wire 1 % clock $end
$var wire 32 1 read_data1 [31:0] $end
$var wire 32 2 read_data2 [31:0] $end
$var wire 5 3 read_reg_num1 [4:0] $end
$var wire 5 4 read_reg_num2 [4:0] $end
$var wire 1 ' regwrite $end
$var wire 1 ( reset $end
$var wire 32 5 write_data [31:0] $end
$var wire 5 6 write_reg [4:0] $end
$var wire 1 ! zero_flag $end

$scope module alu_module $end
$var wire 4 $ alu_control [3:0] $end
$var wire 32 1 in1 [31:0] $end
$var wire 32 2 in2 [31:0] $end
$var reg 32 7 alu_result [31:0] $end
$var reg 1 8 zero_flag $end
$upscope $end

$scope module reg_file_module $end
$var wire 1 % clock $end
$var wire 32 1 read_data1 [31:0] $end
$var wire 32 2 read_data2 [31:0] $end
$var wire 5 3 read_reg_num1 [4:0] $end
$var wire 5 4 read_reg_num2 [4:0] $end
$var wire 1 ' regwrite $end
$var wire 1 ( reset $end
$var wire 32 5 write_data [31:0] $end
$var wire 5 6 write_reg [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x!
0%
1(
0"
1#
bx $
bx &
x'
b0 +
b0 )
b0 *
bx ,
bx -
bx .
bx /
x0
bx 1
bx 2
bx 3
bx 4
bx 5
bx 6
bx 7
x8
$end
#20
1"
1%
#40
0"
0%
#50
0#
0(
#60
1"
1%
b100101000000001100110011 &
b0 ,
b0 -
b110011 .
b1000 3
b1001 4
b110 6
b1000 1
b1001 2
08
10
b0 /
1'
0!
b0 $
b10001 7
b10001 5
b1 *
#80
0"
0%
#100
1"
1%
b100 )
b100 +
b1000001001010011000001110110011 &
b100000 -
b10011 3
b10010 4
b111 6
b10011 1
b10010 2
b100101 7
b1 /
b100101 5
b1 $
b1 7
b1 5
#120
0"
0%
#140
1"
1%
b1000 )
b1000 +
b111101110110100010110011 &
b110 ,
b0 -
b1110 3
b1111 4
b10001 6
b1110 1
b1111 2
b11111111111111111111111111111111 7
b10 /
b11111111111111111111111111111111 5
b10 $
b1 7
b1 5
#160
0"
0%
#180
1"
1%
b1100 )
b1100 +
b110101100111111110110011 &
b111 ,
b1100 3
b1101 4
b11111 6
b1100 1
b1101 2
b11 /
b11 $
#200
0"
0%
#220
1"
1%
b10000 )
b10000 +
b1011110110100111000110011 &
b100 ,
b10110 3
b10111 4
b11100 6
b10110 1
b10111 2
b100 /
b100 $
#240
0"
0%
#260
1"
1%
b10100 )
b10100 +
b1101111011010111100110011 &
b10 ,
b11011 3
b11011 4
b11110 6
b11011 1
b11011 2
b0 7
18
b101 /
1!
b0 5
b101 $
#280
0"
0%
#300
1"
1%
b11000 )
b11000 +
bx &
bx ,
bx -
bx .
bx 3
bx 4
bx 6
bx 1
bx 2
#320
0"
0%
#340
1"
1%
b11100 )
b11100 +
#360
0"
0%
#380
1"
1%
b100000 )
b100000 +
#400
0"
0%
#420
1"
1%
b100100 )
b100100 +
#440
0"
0%
#460
1"
1%
b101000 )
b101000 +
#480
0"
0%
